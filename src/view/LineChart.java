/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import dao.ChiTietBaoCaoDAO;
import dao.BaoCaoDoanhThuDAO;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import model.ChiTietBaoCao;
import model.BaoCaoDoanhThu;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author ACER
 */
public class LineChart extends javax.swing.JInternalFrame {

    /**
     * Creates new form LineChartExample
     */
    public LineChart(int NumberType, int month, int year, int year1) {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        switch (NumberType) {
            case 0:
            {
                ArrayList<ChiTietBaoCao> ctbc = ChiTietBaoCaoDAO.getInstance().SelectByMonth(month, year);
                DefaultPieDataset dataset = new DefaultPieDataset();

                for(ChiTietBaoCao a0 : ctbc)
                {
                    System.out.println("abc: "+a0.getNgay().substring(a0.getNgay().length()-2));
//                    dataset.addValue(a0.getDoanhThu()/1000000, "Thang 3", a0.getNgay().substring(a0.getNgay().length()-2));
                    dataset.setValue("Ngày " + a0.getNgay().substring(a0.getNgay().length()-2), new Double(a0.getTiLe()*100));
                }

                JFreeChart chart = ChartFactory.createPieChart(
                        "", dataset, true, true, false);
                PiePlot plot = (PiePlot) chart.getPlot();
                plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}: ({2})"));
                plot.setLabelBackgroundPaint(Color.PINK);
                ChartPanel panel = new ChartPanel(chart);  
                setContentPane(panel);
                
                break;
            }
            case 1:
            {
                ArrayList<BaoCaoDoanhThu> bcdt = BaoCaoDoanhThuDAO.getInstance().SelectByYear(2023);
                DefaultPieDataset dataset = new DefaultPieDataset();
                for(BaoCaoDoanhThu a0 : bcdt)
                {
//                    dataset.addValue(a0.getDoanhThu()/1000000, "Thang 3", a0.getNgay().substring(a0.getNgay().length()-2));
                    dataset.setValue("Tháng " + a0.getThang(), new Double(a0.getTongDoanhThu()/a0.getTongThang()*100));
                }

                JFreeChart chart = ChartFactory.createPieChart(
                        "", dataset, true, true, false);
                PiePlot plot = (PiePlot) chart.getPlot();
                plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}: ({2})"));
                plot.setLabelBackgroundPaint(Color.PINK);
                ChartPanel panel = new ChartPanel(chart);  
                setContentPane(panel);
                break;
            }
            case 2:
            {
                ArrayList<BaoCaoDoanhThu> bcdt = BaoCaoDoanhThuDAO.getInstance().SelectByFromY1toY2(2023, 2024);
                DefaultPieDataset dataset = new DefaultPieDataset();
                for(BaoCaoDoanhThu a0 : bcdt)
                {
//                    dataset.addValue(a0.getDoanhThu()/1000000, "Thang 3", a0.getNgay().substring(a0.getNgay().length()-2));
                    dataset.setValue("Năm " + a0.getNam(), new Double(a0.getTongDoanhThu()/a0.getTongNam()*100));
                }

                JFreeChart chart = ChartFactory.createPieChart(
                        "", dataset, true, true, false);
                PiePlot plot = (PiePlot) chart.getPlot();
                plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}: ({2})"));
                plot.setLabelBackgroundPaint(Color.PINK);
                ChartPanel panel = new ChartPanel(chart);  
                setContentPane(panel);
                break;
            }               
            default:
                throw new AssertionError();
        }
    }
    public LineChart() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(595, 320));
        setRequestFocusEnabled(false);
        setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
